@mixin clearfix {
	&::after {
		clear: both;
		content: '';
		display: table;
	}
}

@mixin debutton {
	// This removes styles added by default to button elements.
	// For when something should semantically be a button,
	// but isn't buttony in appearance.
	background-color: transparent;
	color: inherit;
	border: none;
	margin: 0;
	padding: 0;
	text-align: inherit;
	font: inherit;
	border-radius: 0;
	appearance: none; // Just in case we missed anything.
}

@mixin delink {
	// Remove default link styles
	color: inherit;
	text-decoration: none;
}

@mixin delist {
	// Remove default list styles
	margin: 0;
	padding: 0;
	list-style: none;
}

@mixin underline {
	border-bottom: 1px solid;
}

// Auto-generates media queries for looping content
@mixin loop-mq {
	@content;

	@each $key, $val in $grid-breakpoints {
		@media (min-width: #{$val}) {
			&\@#{$key} {
				@content;
			}
		}
	}
}

@mixin visually-hidden($status: null) {
	position: absolute !important;
	clip: rect(1px 1px 1px 1px); // IE6, IE7
	clip: rect(1px, 1px, 1px, 1px);
	padding: 0 !important;
	border: 0 !important;
	height: 1px !important;
	width: 1px !important;
	overflow: hidden;

	@if $status == 'disable' {
		position: static !important;
		clip: auto !important;
		height: auto !important;
		width: auto !important;
		overflow: visible;
	}
}

@mixin focus-styles {
	// Disable native outline since we're drawing our own via box-shadow
	outline: none;

	// This draws a doubled-up border, which is white and navy. This is to ensure
	// it's visible on all backgrounds. It's marked as !important so this focus
	// state takes effect even when used on elements with higher-specificity
	// box-shadows applied to them. And because focus states are important. :)
	box-shadow: 0 0 0 2px $color-safe-focus, 0 0 0 4px white !important;
}

@mixin margin-spacing($side, $spacer-key) {
	@if $side == 'all' {
		margin: space($spacer-key);
	} @else if $side == 'y' {
		margin-top: space($spacer-key);
		margin-bottom: space($spacer-key);
	} @else if $side == 'x ' {
		margin-right: space($spacer-key);
		margin-left: space($spacer-key);
	} @else {
		margin-#{$side}: space($spacer-key);
	}
}

@mixin padding-spacing($side, $spacer-key) {
	@if $side == 'all' {
		padding: space($spacer-key);
	} @else if $side == 'y' {
		padding-top: space($spacer-key);
		padding-bottom: space($spacer-key);
	} @else if $side == 'x' {
		padding-right: space($spacer-key);
		padding-left: space($spacer-key);
	} @else {
		padding-#{$side}: space($spacer-key);
	}
}

@mixin text-shadow($size: remify(1), $distance: 1.25em, $color: color('black')) {
	text-shadow: $size $size $distance $color;
}

@mixin default-box-shadow {
	box-shadow: 0.625rem 0.875rem 1.125rem -1rem $color-box-shadow;
}

@mixin background-card {
	padding-bottom: ratio(288, 452); // figma card dimensions
	position: relative;
	display: block;
	width: 100%;
}

@mixin background-card-image {
	@include default-box-shadow;

	position: absolute;
	object-fit: cover;
	top: 0;
	width: 100%;
	height: 100%;
}

@mixin antialiased {
	-moz-osx-font-smoothing: antialiased;
	-webkit-font-smoothing: antialiased;
}
